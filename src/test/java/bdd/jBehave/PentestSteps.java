package bdd.jBehave;

import org.jbehave.core.annotations.Given;
import org.jbehave.core.annotations.Then;
import org.jbehave.core.annotations.When;
import org.jbehave.core.model.ExamplesTable;
import org.mockito.internal.matchers.apachecommons.ReflectionEquals;
import pl.edu.pjatk.tau.Controller.PentestController;
import pl.edu.pjatk.tau.Domain.PentestingSession;
import pl.edu.pjatk.tau.Repository.PentestRepository;
import pl.edu.pjatk.tau.Service.IOTimesService;
import pl.edu.pjatk.tau.Service.PentestingSessionService;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static junit.framework.Assert.assertTrue;

public class PentestSteps {
    private PentestController pentestController;
    private List<Integer> ids = new ArrayList<>();


    @Given("a deleteByIds functionality with initial data: $table")
    public void pentestControllerSetup(ExamplesTable table) {
        PentestingSessionService sessionsService = new PentestingSessionService(
                new PentestRepository(toPentestSessionsList(table)),
                new IOTimesService()
        );

        pentestController = new PentestController(sessionsService);
    }

    @When("providing a list of items to delete: $list")
    public void setIdsList(ExamplesTable list) {
        for (Map<String,String> row : list.getRows()) {
            int id = Integer.parseInt(row.get("id"));
            ids.add(id);
        }

        pentestController.deleteByIds(ids);
    }

    @Then("it should return a list: $resultTable")
    public void shouldReturnSearch(ExamplesTable resultTable) {
        List<PentestingSession> expected = toPentestSessionsList(resultTable);
        List<PentestingSession> actual = pentestController.getPentests();

        assertTrue(new ReflectionEquals(expected).matches(actual));
    }

    private List<PentestingSession> toPentestSessionsList(ExamplesTable table) {
        List<PentestingSession> sessions = new ArrayList<>();

        for (Map<String,String> row : table.getRows()) {
            int id = Integer.parseInt(row.get("id"));
            String title = row.get("title");
            String riskType = row.get("riskType");
            int time = Integer.parseInt(row.get("time"));
            float weight = Float.parseFloat(row.get("weight"));

            PentestingSession session = new PentestingSession(title);
            session.setId(id);
            session.setRiskType(riskType);
            session.setTimeInMinutes(time);
            session.setWeight(weight);

            sessions.add(session);
        }

        return sessions;
    }
}
