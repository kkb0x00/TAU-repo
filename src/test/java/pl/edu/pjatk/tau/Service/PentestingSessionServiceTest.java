package pl.edu.pjatk.tau.Service;

import org.junit.Assert;
import org.junit.Before;

import pl.edu.pjatk.tau.Domain.IOTimes;
import pl.edu.pjatk.tau.Domain.PentestingSession;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;

public class PentestingSessionServiceTest {
    private PentestingSessionService sessionService;
    private PentestingSession firstSession = null;
    private PentestingSession secondSession = null;
    private DBTimeService DBTimeService = null;

    @Before
    public void setUp() {
        DBTimeService = mock(DBTimeService.class);
        doNothing().when(DBTimeService).setInsertTime(any(IOTimes.class));
        doNothing().when(DBTimeService).setlastReadTime(any(IOTimes.class));
        doNothing().when(DBTimeService).setlastUpdateTime(any(IOTimes.class));

        List<PentestingSession> sessions = new ArrayList<>();
        firstSession = new PentestingSession("test1", null);
        firstSession.setId(1);

        secondSession = new PentestingSession("test2", null);
        secondSession.setId(2);

        sessions.add(firstSession);
        sessions.add(secondSession);

        sessionService = new PentestingSessionService();
    }

    @org.junit.Test
    public void shouldReturnFirstSessionFromDatabaseTest() {
        PentestingSession element = sessionService.get(1);
        Assert.assertEquals(element, firstSession);
    }

    @org.junit.Test
    public void shouldReturnLastSessionFromDatabaseTest() {
        PentestingSession element = sessionService.get(2);
        Assert.assertEquals(element, secondSession);
    }

    @org.junit.Test
    public void shouldReturnNullSessionTest() {
        Assert.assertNull(sessionService.get(444));
    }

    @org.junit.Test
    public void shouldReturnAllSessionsFromDatabaseTest() {
        List<PentestingSession> sessionsList = new ArrayList<PentestingSession>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        Iterable<PentestingSession> sessions = sessionService.getAll();
        Assert.assertEquals(sessions, sessionsList);
    }

    @org.junit.Test
    public void shouldAddPentestingSessionTest() {
        String title = "test123";

        PentestingSession newSession = new PentestingSession(title, null);
        sessionService.add(newSession);

        Assert.assertEquals(sessionService.get(3), newSession);
//        Assert.assertEquals(sessionService.get(3).getTitle(), title);
        Assert.assertEquals(sessionService.getAll(), 3);
    }

    @org.junit.Test
    public void shouldUpdatePentestingSessionTest() {
        PentestingSession updatedSession = new PentestingSession("testUpdate", null);
        sessionService.update(1, updatedSession);

        Assert.assertEquals(sessionService.get(1).getTitle(), "testUpdate");
    }

    @org.junit.Test
    public void shouldDeletePentestingSessionTest() {
        sessionService.delete(1);

        Assert.assertEquals(sessionService.getAll(), 1);
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnGetTest() {
        PentestingSession element = sessionService.get(1);

        verify(DBTimeService, atLeast(1)).setlastReadTime(element);
        verify(DBTimeService, atMost(1)).setlastReadTime(element);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastReadTimeOnGetTest() {
        PentestingSession session = sessionService.get(1);

        verify(DBTimeService, only()).setlastReadTime(session);
    }

    @org.junit.Test
    public void shouldCallExactTimesIOTimesServiceOnGetAllTest() {
        List<PentestingSession> sessionsList = new ArrayList<PentestingSession>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        sessionService.getAll();

        verify(DBTimeService, times(sessionsList.size())).setlastReadTime(any(IOTimes.class));
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnInsertTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.add(session);

        verify(DBTimeService, atLeast(1)).setInsertTime(session);
        verify(DBTimeService, atMost(1)).setInsertTime(session);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastInsertTimeOnAddTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.add(session);

        verify(DBTimeService, only()).setInsertTime(session);
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnUpdateTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.update(1, session);

        verify(DBTimeService, atLeast(1)).setlastUpdateTime(session);
        verify(DBTimeService, atMost(1)).setlastUpdateTime(session);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastUpdateTimeOnAddTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.update(1, session);

        verify(DBTimeService, only()).setlastUpdateTime(session);
    }
}