package pl.edu.pjatk.tau.Service;

import org.junit.Assert;
import org.junit.Before;

import pl.edu.pjatk.tau.Domain.IOTimes;
import pl.edu.pjatk.tau.Domain.PentestingSession;
import pl.edu.pjatk.tau.Exceptions.InvalidIdException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class PentestingSessionServiceTest {
    private PentestingSessionService sessionService;
    private PentestingSession firstSession = null;
    private PentestingSession secondSession = null;
    private IOTimesService ioTimesService = null;

    @Before
    public void setUp() {
        ioTimesService = mock(IOTimesService.class);
        doNothing().when(ioTimesService).setInsertTime(any(IOTimes.class));
        doNothing().when(ioTimesService).setlastReadTime(any(IOTimes.class));
        doNothing().when(ioTimesService).setlastUpdateTime(any(IOTimes.class));

        HashMap<Integer, PentestingSession> sessions = new HashMap<Integer, PentestingSession>();
        firstSession = new PentestingSession(30, 1);
        secondSession = new PentestingSession(50, 2);

        sessions.put(1, firstSession);
        sessions.put(2, secondSession);
        sessionService = new PentestingSessionService(sessions, ioTimesService);
    }

    @org.junit.Test
    public void shouldReturnDatabaseObjectTest() {

        assertNotNull(sessionService.getDatabaseHandler());
    }

    @org.junit.Test
    public void shouldReturnFirstSessionFromDatabaseTest() throws InvalidIdException {
        PentestingSession element = sessionService.get(1);
        assertEquals(element, firstSession);
    }

    @org.junit.Test
    public void shouldReturnLastSessionFromDatabaseTest() throws InvalidIdException {
        PentestingSession element = sessionService.get(2);
        Assert.assertEquals(element, secondSession);
    }

    @org.junit.Test(expected = InvalidIdException.class)
    public void shouldNotReturnInvalidSessionFromDatabaseTest() throws InvalidIdException {
        sessionService.get(444);
    }

    @org.junit.Test
    public void shouldReturnAllSessionsFromDatabaseTest() {
        List<PentestingSession> sessionsList = new ArrayList<PentestingSession>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        List<PentestingSession> sessions = sessionService.getAll();
        Assert.assertEquals(sessions, sessionsList);
    }

    @org.junit.Test
    public void shouldAddPentestingSessionTest() throws InvalidIdException {
        int time = 10;

        PentestingSession newSession = new PentestingSession(time,5);
        sessionService.add(3, newSession);

        Assert.assertEquals(sessionService.get(3), newSession);
        Assert.assertEquals(sessionService.get(3).getTimeInMinutes(), time);
        Assert.assertEquals(sessionService.getAll().size(), 3);
    }

    @org.junit.Test(expected = InvalidIdException.class)
    public void shouldNotAddPentestingSessionAtExistingIndexTest() throws InvalidIdException {
        PentestingSession newSession = new PentestingSession(10,5);
        sessionService.add(1, newSession);
    }

    @org.junit.Test
    public void shouldUpdatePentestingSessionTest() throws InvalidIdException {
        PentestingSession updatedSession = new PentestingSession(40,1);

        sessionService.update(1, updatedSession);

        Assert.assertEquals(sessionService.get(1), updatedSession);
        Assert.assertNotEquals(sessionService.get(2), updatedSession);
    }

    @org.junit.Test(expected = InvalidIdException.class)
    public void shouldNotUpdatePentestingSessionWithNotExistingIdTest() throws InvalidIdException {
        PentestingSession updatedSession = new PentestingSession(40,1);
        sessionService.update(3, updatedSession);
    }

    @org.junit.Test
    public void shouldDeletePentestingSessionTest() throws InvalidIdException {
        sessionService.delete(1);

        Assert.assertEquals(sessionService.getAll().size(), 1);
    }

    @org.junit.Test(expected = InvalidIdException.class)
    public void shouldNotDeletePentestingSessionWithNotExistingIdTest() throws InvalidIdException {
        sessionService.delete(3);
    }

    @org.junit.Test
    public void shouldCallIOTimesServiceOnGetTest() throws InvalidIdException {
        PentestingSession element = sessionService.get(1);

        verify(ioTimesService, atLeast(1)).setlastReadTime(element);
        verify(ioTimesService, atMost(1)).setlastReadTime(element);
    }

    @org.junit.Test
    public void shouldCallIOTimesServiceOnGetAllTest() throws InvalidIdException {
        List<PentestingSession> sessionsList = new ArrayList<PentestingSession>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        sessionService.getAll();
        verify(ioTimesService, times(2)).setlastReadTime(any(IOTimes.class));
    }

    @org.junit.Test
    public void shouldCallIOTimesServiceOnInsertTest() throws InvalidIdException {
        PentestingSession session = new PentestingSession(10,5);
        sessionService.add(3, session);

        verify(ioTimesService, atLeast(1)).setInsertTime(session);
        verify(ioTimesService, atMost(1)).setInsertTime(session);
    }

    @org.junit.Test
    public void shouldCallIOTimesServiceOnUpdateTest() throws InvalidIdException {
        PentestingSession updatedSession = new PentestingSession(40,1);

        sessionService.update(1, updatedSession);

        verify(ioTimesService, atLeast(1)).setlastUpdateTime(updatedSession);
        verify(ioTimesService, atMost(1)).setlastUpdateTime(updatedSession);
    }
}