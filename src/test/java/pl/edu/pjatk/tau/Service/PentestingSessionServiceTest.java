package pl.edu.pjatk.tau.Service;

import org.junit.Assert;
import org.junit.Before;
import org.junit.runner.RunWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import pl.edu.pjatk.tau.Domain.IOTimes;
import pl.edu.pjatk.tau.Domain.PentestingSession;
import pl.edu.pjatk.tau.Repository.PentestSessionRepository;

import java.util.*;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class PentestingSessionServiceTest {

    @InjectMocks
    private PentestingSessionService sessionService;

    @Mock
    private PentestSessionRepository sessionRepository;

    @Mock
    private DBTimeService DBTimeService;

    private PentestingSession firstSession = null;
    private PentestingSession secondSession = null;
    private PentestingSession thirdSession = null;

    @Before
    public void setUp() {
        doNothing().when(DBTimeService).setInsertTime(any(IOTimes.class));
        doNothing().when(DBTimeService).setlastReadTime(any(IOTimes.class));
        doNothing().when(DBTimeService).setlastUpdateTime(any(IOTimes.class));

        firstSession = new PentestingSession("test1", null);
        secondSession = new PentestingSession("test2", null);
        thirdSession = new PentestingSession("test3", null);

        when(sessionRepository.findById(1)).thenReturn(Optional.of(firstSession));
        when(sessionRepository.findById(2)).thenReturn(Optional.of(secondSession));
        when(sessionRepository.findById(444)).thenReturn(Optional.empty());
        when(sessionRepository.findAll()).thenReturn(
                new ArrayList<>(Arrays.asList(firstSession, secondSession))
        );

//        when(sessionRepository.findById(3)).thenReturn(Optional.of(thirdSession));
//        when(sessionRepository.findAll()).thenReturn(Collections.singletonList("tet"));
//        when(sessionRepository.findById(444)).thenReturn(Optional.of(thirdSession));

    }

    @org.junit.Test
    public void shouldReturnSessionFromDatabaseTest() {
        PentestingSession element = sessionService.get(1);
        Assert.assertEquals(element, firstSession);
    }

    @org.junit.Test
    public void shouldReturnLastSessionFromDatabaseTest() {
        PentestingSession element = sessionService.get(2);
        Assert.assertEquals(element, secondSession);
    }

    @org.junit.Test
    public void shouldReturnNullSessionTest() {
        Assert.assertNull(sessionService.get(444));
    }

    @org.junit.Test
    public void shouldReturnAllSessionsFromDatabaseTest() {
        List<PentestingSession> sessionsList = new ArrayList<>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        Iterable<PentestingSession> sessions = sessionService.getAll();
        Assert.assertEquals(sessions, sessionsList);
    }

    @org.junit.Test
    public void shouldAddPentestingSessionTest() {
        PentestingSession newSession = new PentestingSession("newSession", null);
        sessionService.add(newSession);

        verify(sessionRepository, times(1)).save(newSession);
    }

    @org.junit.Test
    public void shouldUpdatePentestingSessionTest() {
        PentestingSession updatedSession = new PentestingSession("testUpdate", null);
        sessionService.update(1, updatedSession);

        Assert.assertEquals(sessionService.get(1).getTitle(), "testUpdate");
    }

    @org.junit.Test
    public void shouldDeletePentestingSessionTest() {
        sessionService.delete(1);

        verify(sessionRepository, times(1)).deleteById(1);
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnGetTest() {
        sessionService.get(1);

        verify(DBTimeService, atLeast(1)).setlastReadTime(firstSession);
        verify(DBTimeService, atMost(1)).setlastReadTime(firstSession);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastReadTimeOnGetTest() {
        PentestingSession session = sessionService.get(1);

        verify(DBTimeService, only()).setlastReadTime(session);
    }

    @org.junit.Test
    public void shouldCallExactTimesIOTimesServiceOnGetAllTest() {
        List<PentestingSession> sessionsList = new ArrayList<PentestingSession>();
        sessionsList.add(firstSession);
        sessionsList.add(secondSession);

        sessionService.getAll();

        verify(DBTimeService, times(sessionsList.size())).setlastReadTime(any(IOTimes.class));
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnInsertTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.add(session);

        verify(DBTimeService, atLeast(1)).setInsertTime(session);
        verify(DBTimeService, atMost(1)).setInsertTime(session);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastInsertTimeOnAddTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.add(session);

        verify(DBTimeService, only()).setInsertTime(session);
    }

    @org.junit.Test
    public void shouldCallOnceIOTimesServiceOnUpdateTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.update(1, session);

        verify(DBTimeService, atLeast(1)).setlastUpdateTime(firstSession);
        verify(DBTimeService, atMost(1)).setlastUpdateTime(firstSession);
    }

    @org.junit.Test
    public void shouldOnlyCallSetLastUpdateTimeOnAddTest() {
        PentestingSession session = new PentestingSession("test1", null);
        sessionService.update(1, session);

        verify(DBTimeService, only()).setlastUpdateTime(firstSession);
    }
}