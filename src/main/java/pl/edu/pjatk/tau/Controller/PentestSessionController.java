package pl.edu.pjatk.tau.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import pl.edu.pjatk.tau.Domain.PentestingSession;
import pl.edu.pjatk.tau.Service.PentestingSessionService;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/pentest")
public class PentestSessionController {

    @Autowired
    private PentestingSessionService pentestSessionService;

    @PostMapping("")
    public ResponseEntity<PentestingSession> create(@RequestBody PentestingSession newSession) {
        PentestingSession session = pentestSessionService.add(newSession);

        if (session == null) {
            return ResponseEntity.notFound().build();
        } else {
            URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                    .path("/{id}")
                    .buildAndExpand(session.getId())
                    .toUri();

            return ResponseEntity.created(uri)
                    .body(session);
        }

    }

    @GetMapping("/{id}")
    public ResponseEntity<PentestingSession> read(@PathVariable("id") int id) {
        PentestingSession session = pentestSessionService.get(id);

        if (session == null) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok(session);
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<PentestingSession> update(@RequestBody PentestingSession session, @PathVariable int id) {
        PentestingSession updatedSession = pentestSessionService.update(id, session);

        if (updatedSession == null) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok(updatedSession);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Object> delete(@PathVariable("id") int id) {
        pentestSessionService.delete(id);

        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping("")
    public Iterable<PentestingSession> getPentests() {
        return pentestSessionService.getAll();
    }


    @DeleteMapping("/pentest/deleteByIds?ids=[{ids}]")
    public void deleteByIds(@PathVariable List<Integer> ids) {
        for (int id: ids) {
            pentestSessionService.delete(id);
        }
    }
}
