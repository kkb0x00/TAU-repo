package pl.edu.pjatk.tau.Service;

import pl.edu.pjatk.tau.Domain.PentestingSession;
import pl.edu.pjatk.tau.Exceptions.InvalidIdException;

import java.util.*;

public class PentestingSessionService implements ISessionService<PentestingSession>{
    private HashMap<Integer, PentestingSession> sessions;
    private IOTimesService ioTimesService;

    public PentestingSessionService(
            HashMap<Integer, PentestingSession> sessionsMap,
            IOTimesService ioTimesServiceGiven
    ) {
        sessions = sessionsMap;
        ioTimesService = ioTimesServiceGiven;
    }

    public HashMap<Integer, PentestingSession> getDatabaseHandler() {
        return sessions;
    }

    public PentestingSession get(int id) throws InvalidIdException {
        PentestingSession session = sessions.get(id);

        if(session == null) {
            throw new InvalidIdException("Pentest o takim id nie istnieje.");
        }

        ioTimesService.setlastReadTime(session);
        return sessions.get(id);
    }

    public List<PentestingSession> getAll() {
        List<PentestingSession> pentestingSessionsList = new ArrayList<PentestingSession>();

        for(Map.Entry<Integer, PentestingSession> entry: sessions.entrySet()) {
            pentestingSessionsList.add(entry.getValue());
            ioTimesService.setlastReadTime(entry.getValue());
        }

        return pentestingSessionsList;
    }

    public void add(int id, PentestingSession pentestingSession) throws InvalidIdException {
        PentestingSession session = sessions.get(id);

        if(session != null) {
            throw new InvalidIdException("Pentest o takim id juz istnieje. Nie moge dodac");
        }

        ioTimesService.setInsertTime(pentestingSession);
        sessions.put(id, pentestingSession);
    }

    public void update(int id, PentestingSession pentestingSession) throws InvalidIdException {
        PentestingSession sessionToUpdate = sessions.get(id);

        if(sessionToUpdate == null) {
            throw new InvalidIdException("Pentest o takim id nie istnieje. Nie moge updatowac");
        }

        ioTimesService.setlastUpdateTime(pentestingSession);
        sessions.put(id, pentestingSession);
    }

    public void delete(int id) throws InvalidIdException {
        PentestingSession sessionToDelete = sessions.get(id);

        if(sessionToDelete == null) {
            throw new InvalidIdException("Pentest o takim id nie istnieje. Nie moge usunac");
        }

        sessions.remove(id);
    }
}
